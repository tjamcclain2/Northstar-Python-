#include <iostream>
#include <vector>
#include <cmath>
#include <random>
#include <algorithm>
#include <chrono>

// Define M_PI if missing (Visual Studio doesn't provide it by default)
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

// Constants you DO use:
constexpr int NUMBER_GW_MODES = 4;
constexpr int NUMBER_SOURCE_ANGLES = 3;
constexpr double EARTH_RADIUS = 6371000.0;     // in meters
constexpr double SPEED_LIGHT = 299792458.0;    // m/s
constexpr double MAXIMUM_HANFORD_LIVINGSTON_TIME_DELAY = 0.0100025673;

// Detector angles (radians)
constexpr double HANFORD_DETECTOR_ANGLES[3] = {
    (46.0 + 27.0 / 60.0 + 18.528 / 3600.0) * M_PI / 180.0,
    (240.0 + 35.0 / 60.0 + 32.4343 / 3600.0) * M_PI / 180.0,
    M_PI / 2.0 + 125.9994 * M_PI / 180.0
};

constexpr double LIVINGSTON_DETECTOR_ANGLES[3] = {
    (30.0 + 33.0 / 60.0 + 46.4196 / 3600.0) * M_PI / 180.0,
    (269.0 + 13.0 / 60.0 + 32.7346 / 3600.0) * M_PI / 180.0,
    M_PI / 2.0 + 197.7165 * M_PI / 180.0
};

// Utility functions
inline void source_vector_from_angles(const double* angles, double* source_vector) {
    double first = angles[0];
    double second = angles[1];
    source_vector[0] = cos(first) * cos(second);
    source_vector[1] = cos(first) * sin(second);
    source_vector[2] = sin(first);
}

inline double time_delay_hanford_to_livingston(const double* source_angles) {
    double hanford_vec[3], livingston_vec[3];
    source_vector_from_angles(HANFORD_DETECTOR_ANGLES, hanford_vec);
    source_vector_from_angles(LIVINGSTON_DETECTOR_ANGLES, livingston_vec);

    double position_vector[3] = {
        EARTH_RADIUS * (livingston_vec[0] - hanford_vec[0]),
        EARTH_RADIUS * (livingston_vec[1] - hanford_vec[1]),
        EARTH_RADIUS * (livingston_vec[2] - hanford_vec[2])
    };

    double gw_vec[3];
    source_vector_from_angles(source_angles, gw_vec);

    double gw_z[3] = { -gw_vec[0], -gw_vec[1], -gw_vec[2] };

    return (gw_z[0] * position_vector[0] +
        gw_z[1] * position_vector[1] +
        gw_z[2] * position_vector[2]) / SPEED_LIGHT;
}

// CPU-only version
class GWAnalysisCPU {
private:
    std::vector<double> time_array;
    int number_time_samples = 0;  // âœ… initialized
    int number_angular_samples = 0;
    int number_amplitude_combinations = 0;
    std::vector<double> model_angles;
    std::vector<double> model_amplitudes;

public:
    GWAnalysisCPU(int num_angular_samples, int num_amplitude_combinations)
        : number_angular_samples(num_angular_samples),
        number_amplitude_combinations(num_amplitude_combinations) {
    }

    void generate_time_array(double signal_lifetime, int sampling_rate) {
        double duration = signal_lifetime + MAXIMUM_HANFORD_LIVINGSTON_TIME_DELAY;
        number_time_samples = static_cast<int>(duration * sampling_rate) * 2;

        time_array.resize(number_time_samples);
        for (int i = 0; i < number_time_samples; ++i) {
            time_array[i] = (i - number_time_samples / 2) / static_cast<double>(sampling_rate);
        }
    }

    void generate_random_parameters() {
        std::mt19937 rng(std::random_device{}());
        std::uniform_real_distribution<double> uniform_decl(-M_PI / 2, M_PI / 2);
        std::uniform_real_distribution<double> uniform_positive(0.0, 2 * M_PI);

        model_angles.resize(number_angular_samples * NUMBER_SOURCE_ANGLES);
        for (int i = 0; i < number_angular_samples; ++i) {
            model_angles[i * 3 + 0] = uniform_decl(rng);     // declination
            model_angles[i * 3 + 1] = uniform_positive(rng); // right ascension
            model_angles[i * 3 + 2] = uniform_positive(rng); // polarization
        }

        model_amplitudes.resize(number_amplitude_combinations * NUMBER_GW_MODES);
        for (int i = 0; i < number_amplitude_combinations * NUMBER_GW_MODES; ++i) {
            model_amplitudes[i] = uniform_positive(rng);
        }
    }

    void run() {
        generate_time_array(0.03, 10000);
        generate_random_parameters();

        std::cout << "First few time samples: ";
        for (int i = 0; i < std::min(5, number_time_samples); ++i) {
            std::cout << time_array[i] << " ";
        }
        std::cout << "\n";

        std::cout << "First few angle sets:\n";
        for (int i = 0; i < std::min(5, number_angular_samples); ++i) {
            std::cout << "Sample " << i << ": "
                << model_angles[i * 3] << ", "
                << model_angles[i * 3 + 1] << ", "
                << model_angles[i * 3 + 2] << "\n";
        }

        std::cout << "Example time delay for first angle: "
            << time_delay_hanford_to_livingston(&model_angles[0]) << " s\n";
    }
};

int main() {
    std::cout << "Starting CPU-only GWAnalysis\n";
    auto start = std::chrono::high_resolution_clock::now();

    GWAnalysisCPU analysis(5, 10);
    analysis.run();

    auto end = std::chrono::high_resolution_clock::now();
    std::cout << "Completed in "
        << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()
        << " ms\n";

    return 0;
}
